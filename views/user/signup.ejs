<div class="flex items-center justify-center min-h-screen bg-cover bg-center" style="background-image: url('/images/backgroundLogin.png');">
    <div class="w-full max-w-md bg-t bg-opacity-90 rounded-lg shadow-md p-8">
        <!-- Signup Error (dynamic error for form submission) -->
        
        
        <!-- Logo -->
        <div class="flex justify-center mb-7">
            <img src="/images/logo.png" alt="Logo" class="h-12 w-auto">
        </div>
        <!-- Flash Messages -->
        <div id="signupError" class="bg-red-500 text-white text-center py-2 rounded-md mb-4 hidden"></div>
       
        <!-- Success Message -->
<% if (typeof success_msg !== 'undefined' && success_msg.length > 0) { %>
    <div class="bg-green-500 text-white text-center py-2 rounded-md mb-4">
        <%= success_msg %>
    </div>
<% } %>



<!-- Error Message -->
<% if (typeof error_msg !== 'undefined' && error_msg.length > 0) { %>
    <div class="bg-red-500 text-white text-center py-2 rounded-md mb-4">
        <%= error_msg %>
    </div>
<% } %>

        <!-- Signup Heading -->
        <h2 class="text-2xl text-white font-bold text-center mb-7">Sign Up</h2>

        <!-- Signup Form -->
        <form id="signupForm" method="POST" onsubmit="submitSignupForm(event)">
            <!-- Username -->
            <div class="mb-4">
                <label for="username" class="block text-white">Username</label>
                <input type="text" id="username" name="username" required class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <p id="usernameError" class="text-red-500 text-sm mt-1 hidden">Username must be between 3-20 characters and contain only letters, numbers, and underscores.</p>
            </div>

            <!-- Email -->
            <div class="mb-4">
                <label for="email" class="block text-white">Email</label>
                <input type="email" id="email" name="email" required class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <p id="emailError" class="text-red-500 text-sm mt-1 hidden">Please enter a valid email address.</p>
            </div>
            
            <!-- Password -->
            <div class="mb-4">
                <label for="password" class="block text-white">Password</label>
                <input type="password" id="password" name="password" required class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <p id="passwordError" class="text-red-500 text-sm mt-1 hidden">Password must be at least 8 characters long and include a number, an uppercase letter, and a lowercase letter.</p>
            </div>
            
            <!-- Confirm Password -->
            <div class="mb-6">
                <label for="confirmPassword" class="block text-white">Confirm Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" required class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <p id="confirmPasswordError" class="text-red-500 text-sm mt-1 hidden">Passwords do not match.</p>
            </div>
            
            <!-- Signup Button -->
            <button type="submit" class="w-full bg-green-500 text-white py-2 rounded-md hover:bg-green-600">Sign Up</button>
        </form>



        <form id="otpForm" method="POST" class="hidden" onsubmit="return submitOtpForm(event)">
            <div class="mb-4">
                <label for="otp" class="block text-white">Enter OTP</label>
                <input type="text" id="otp" name="otp" required class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                <p id="otpError" class="text-red-500 text-sm mt-1 hidden">Invalid OTP. Please try again.</p>
            </div>
            
            <!-- Countdown Timer -->
            <div class="mb-4 text-center text-white">
                <span id="otpTimer">00:00</span>
            </div>
        
            <!-- Resend OTP Link (Hidden initially) -->
            <p id="resendOtp" class="text-center mt-4 text-blue-500 hover:text-blue-700 hidden cursor-pointer" onclick="resendOtp()">Resend OTP</p>
        
            <button type="submit" class="w-full bg-green-500 text-white py-2 rounded-md hover:bg-green-600">Verify OTP</button>
        </form>
        






        <!-- Sign In Link -->
        <p class="text-center mt-4 text-white">
            Already have an Account? 
            <a href="/login" class="text-blue-500 hover:text-blue-700">Sign In here.</a>
        </p>

        <!-- Signup with Others -->
        <p class="text-center mt-6 text-white">or sign up with</p>

        <!-- Social Login Buttons -->
        <div class="flex justify-between mt-4">
            <!-- Google Button -->
            <a href="/auth/google" target="_blank" class="flex items-center justify-center w-1/2 mr-2 bg-transparent text-white py-2 rounded-md border border-white hover:bg-white hover:text-red-500 transition-colors duration-300">
                <i class="bi bi-google mr-2"></i>
                Google
            </a>
       
            <!-- Facebook Button -->
            <button class="flex items-center justify-center w-1/2 ml-2 bg-transparent text-white py-2 rounded-md border border-white hover:bg-white hover:text-blue-600 transition-colors duration-300">
                <i class="bi bi-facebook mr-2"></i>
                Facebook
            </button>
        </div>
        
    </div>
</div>

<script>

   // Timer for OTP form
let otpTimerInterval;

function startOtpTimer(duration) {
    let timer = duration, minutes, seconds;
    otpTimerInterval = setInterval(() => {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        document.getElementById('otpTimer').textContent = minutes + ":" + seconds;

        if (--timer < 0) {
            clearInterval(otpTimerInterval);
            document.getElementById('resendOtp').classList.remove('hidden'); // Show the resend OTP link
        }
    }, 1000);
}

// Call this when OTP form is displayed (starts 2-minute countdown)
function displayOtpForm() {
    document.getElementById('signupForm').classList.add('hidden');
    document.getElementById('otpForm').classList.remove('hidden');

    // Start OTP countdown (2 minutes = 120 seconds)
    startOtpTimer(120);
}

// Submit signup form with OTP process
function submitSignupForm(event) {
    event.preventDefault();

    if (!validateForm()) {
        return;
    }

    // If valid, send a POST request to the backend to initiate OTP process
    const formData = new FormData(document.getElementById('signupForm'));
    const data = Object.fromEntries(formData.entries());

    fetch('/signup', {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            username: data.username,
            email: data.email,
            password: data.password
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Hide signup form and show OTP form
            displayOtpForm();
        } else {
            // Handle signup error (e.g., email already exists)
            document.getElementById('signupError').textContent = data.message || 'Signup failed. Please try again.';
            document.getElementById('signupError').classList.remove('hidden');
        }
    });
}

// Submit OTP form for verification
function submitOtpForm(event) {
    event.preventDefault();

    const otpFormData = new FormData(document.getElementById('otpForm'));
    const otpData = Object.fromEntries(otpFormData.entries());
    const email = document.getElementById('email').value;

    fetch('/verify-otp', {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            otp: otpData.otp,
            email: email
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Redirect to login or dashboard
            window.location.href = '/home';
        } else {
            // Show OTP error
            document.getElementById('otpError').textContent = data.message || 'Invalid OTP. Please try again.';
            document.getElementById('otpError').classList.remove('hidden');
        }
    });
}

// Resend OTP functionality
function resendOtp() {
    const email = document.getElementById('email').value;

    fetch('/resend-otp', {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ email: email })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Reset the timer and hide the resend link again
            document.getElementById('resendOtp').classList.add('hidden');
            startOtpTimer(120); // Restart 2-minute countdown
        } else {
            // Show resend error (optional)
            document.getElementById('otpError').textContent = 'Failed to resend OTP. Please try again.';
            document.getElementById('otpError').classList.remove('hidden');
        }
    });
}


    function validateForm() {
        // Clear previous error messages
        document.getElementById("usernameError").classList.add("hidden");
        document.getElementById("emailError").classList.add("hidden");
        document.getElementById("passwordError").classList.add("hidden");
        document.getElementById("confirmPasswordError").classList.add("hidden");

        // Get form values
        const username = document.getElementById("username").value;
        const email = document.getElementById("email").value;
        const password = document.getElementById("password").value;
        const confirmPassword = document.getElementById("confirmPassword").value;

        // Validate username format
        const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
        if (!usernameRegex.test(username)) {
            document.getElementById("usernameError").classList.remove("hidden");
            return false;
        }

        // Validate email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            document.getElementById("emailError").classList.remove("hidden");
            return false;
        }

        // Validate strong password
        const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;
        if (!passwordRegex.test(password)) {
            document.getElementById("passwordError").classList.remove("hidden");
            return false;
        }

        // Validate confirm password
        if (password !== confirmPassword) {
            document.getElementById("confirmPasswordError").classList.remove("hidden");
            return false;
        }

        // If all validations pass, allow form submission
        return true;
    }



    
</script>
