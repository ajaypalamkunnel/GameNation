<%- include('header') %>

  <div class="bg-gray-900 p-2">
    <ul class="flex items-center ml-6   bg-gray-900 font-[sans-serif]  ">
      <a class="text-white  text-base cursor-pointer" href="/">
        <li></li>
        Home
        </li>
      </a>
      <li>
        <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400 w-3.5 -rotate-90" viewBox="0 0 24 24">
          <path fill-rule="evenodd"
            d="M11.99997 18.1669a2.38 2.38 0 0 1-1.68266-.69733l-9.52-9.52a2.38 2.38 0 1 1 3.36532-3.36532l7.83734 7.83734 7.83734-7.83734a2.38 2.38 0 1 1 3.36532 3.36532l-9.52 9.52a2.38 2.38 0 0 1-1.68266.69734z"
            clip-rule="evenodd" data-original="#000000"></path>
        </svg>
      </li>
      <li class="text-gray-500 text-base cursor-pointer">
        <a href="/orders">orders</a>
      </li>
      <li>
        <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400 w-3.5 -rotate-90" viewBox="0 0 24 24">
          <path fill-rule="evenodd"
            d="M11.99997 18.1669a2.38 2.38 0 0 1-1.68266-.69733l-9.52-9.52a2.38 2.38 0 1 1 3.36532-3.36532l7.83734 7.83734 7.83734-7.83734a2.38 2.38 0 1 1 3.36532 3.36532l-9.52 9.52a2.38 2.38 0 0 1-1.68266.69734z"
            clip-rule="evenodd" data-original="#000000"></path>
        </svg>
      </li>
    
    </ul>
  </div>


  <div class="container mx-auto p-4 bg-gray-900">
    <h1 class="text-3xl font-bold text-center text-white mb-8">My Orders</h1>

    <% if(!orders || orders.length===0){ %>

      <p class="text-white text-center">You have no orders yet.</p>

      <% }else{ %>
        <% orders.forEach(order=>{ %>
          <!-- Order Card 1 -->
          <div class="bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
            <div class="flex justify-between items-center mb-4">
              <div>
                <p class="text-white text-lg font-semibold">
                  Order ID: <%= order.order_id %>
                </p>
                <p class="text-gray-400 text-sm">
                  Ordered date: <%= new Date(order.createdAt).toLocaleDateString('en-GB') %>
                </p>
                <p class="text-<%= order.orderStatus === 'Delivered' ? 'green-400' : 'yellow-400' %> font-medium">
                  Order status: <%= order.orderStatus %>
                </p>
              </div>
              <% if (order.orderStatus==='Confirmed' || order.orderStatus==='Pending' || order.orderStatus==='Shipped' )
                { %>
                <div>
                  <a class="bg-red-500 text-white text-sm font-semibold px-4 py-2 rounded-lg hover:bg-red-600"
                    onclick="showCancelModal('<%= order._id%>')">Cancel</a>
                </div>
                <% }else if(order.orderStatus==='Delivered' ){ %>
                  <div>
                    <a class="bg-red-500 text-white text-sm font-semibold px-4 py-2 rounded-lg hover:bg-red-600"
                      onclick="showReturnModal('<%= order._id%>')">Return</a>
                  </div>
                  <% }else if(order.orderStatus==='Cancelled' ){%>
                    <div>
                      <p class="text-yellow-300 text-center">Cancelled</p>
                    </div>

                    <% }else{ %>
                      <div>
                        <p class="text-yellow-300 text-center">Returned</p>
                      </div>

                      <% } %>


            </div>


            <% order.products.forEach(product=>{ %>

              <div class="flex flex-col md:flex-row mb-4">
                <!-- Product Image -->
                <div class="w-full md:w-1/4 mb-4 md:mb-0">
                  <% if (product.product_id && product.product_id.image && product.product_id.image.length> 0) { %>
                    <img src="<%= product.product_id.image[0] %>" alt="<%= product.product_name %>"
                      class="rounded-lg w-1/2" />
                    <% } else { %>
                      <!-- Fallback Image -->
                      <img src="/path/to/default-image.jpg" alt="No image available" class="rounded-lg w-full" />
                      <% } %>
                </div>

                <!-- Product Details -->
                <div class="w-full md:w-3/4 md:pl-6">
                  <p class="text-white font-medium">
                    <%= product.product_name %>
                  </p>
                  <p class="text-gray-400 text-sm">
                    QTY: <%= product.product_quantity %>
                  </p>
                  <p class="text-gray-400 text-sm">
                    Price: ₹ <%= product.product_price.toFixed(2) %>
                  </p>
                  <p class="text-white mt-4 font-bold">
                    Total: ₹ <%= (product.product_price * product.product_quantity).toFixed(2) %>
                  </p>

                  <!-- View Details Button -->
                </div>
              </div>
              <% }) %>
                <div class="mt-10">
                  <a href="/orderView?orderId=<%= order._id %>"
                    class="bg-green-500 text-white font-semibold px-4 py-2 rounded-lg hover:bg-green-600">view
                    details</a>
                </div>

                <!-- Total Price for the Order -->
                <div class="bg-orange-70">




                  <div class="text-right mt-6">
                    <p class="text-white font-bold text-xl">
                      Total: ₹ <%= (order.totalPrice - order.couponDiscount).toFixed(2) %>
                    </p>
                  </div>

                  <% if(order.paymentStatus==='Pending' && (order.paymentMethod==='razorpay'
                    ||order.paymentMethod==='Wallet' )){%>
                    <div>
                      <a class="bg-green-500 text-white text-sm font-semibold px-4 py-2 rounded-lg hover:bg-green-600"
                        onclick="payNow('<%= order.priceAfterCouponDiscount.toFixed() %>','<%= order.order_id %>')">Pay
                        Now</a>
                    </div>
                    <%}%>
                </div>


          </div>

          <% }) %>
            <% } %>
  </div>

  <!-- order cancel modal -->

  <div class="fixed inset-0 z-50 flex items-center justify-center overflow-auto bg-gray-500 bg-opacity-75 hidden"
    id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel">
    <div class="relative w-full max-w-lg mx-auto">
      <div class="bg-white rounded-lg shadow-xl">
        <div class="flex items-start justify-between p-4 border-b border-gray-200">
          <h5 class="text-xl font-medium text-gray-900" id="cancelOrderModalLabel">
            Cancel Order
          </h5>
          <button type="button" class="text-gray-400 hover:text-gray-600 focus:outline-none" data-bs-dismiss="modal"
            aria-label="Close">
            <span class="sr-only">Close</span>
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd"
                d="M10 8.586L4.707 3.293a1 1 0 00-1.414 1.414L8.586 10l-5.293 5.293a1 1 0 001.414 1.414L10 11.414l5.293 5.293a1 1 0 001.414-1.414L11.414 10l5.293-5.293a1 1 0 00-1.414-1.414L10 8.586z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
        <div class="p-4">
          <form id="cancelOrderForm">
            <input class="text-black hidden" type="text" value="" id="orderIdCancel" name="orderId" />
            <div class="mb-4">
              <label for="cancelReason" class="block text-sm font-medium text-gray-700">Reason for Cancellation</label>
              <textarea
                class="mt-1 block w-full rounded-md border-gray-700 shadow-sm focus:border-indigo-800 focus:ring-indigo-700 sm:text-sm"
                id="cancelReason" rows="3" required></textarea>
            </div>
          </form>
        </div>
        <div class="flex items-center justify-end p-4 border-t border-gray-200">
          <button type="button"
            class="px-4 py-2 text-sm font-medium text-gray-500 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            data-bs-dismiss="modal">
            Close
          </button>
          <button id="submitCancelOrder"
            class="ml-3 inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
            Confirm
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- order return modal -->

  <!-- Return Order Modal -->
  <div class="fixed inset-0 z-50 flex items-center justify-center bg-gray-500 bg-opacity-75 hidden"
    id="modalreturnOrder" tabindex="-1" aria-labelledby="returnOrderLabel">
    <div class="relative w-full max-w-lg mx-auto">
      <div class="bg-white rounded-lg shadow-xl">
        <div class="flex items-start justify-between p-4 border-b border-gray-200">
          <h5 class="text-xl font-medium text-gray-900" id="returnOrderLabel">
            Return Order
          </h5>
          <button id="returnModalCloseButton" type="button" class="text-gray-400 hover:text-gray-600 focus:outline-none"
            data-bs-dismiss="modal" aria-label="Close">
            <span class="sr-only">Close</span>
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd"
                d="M10 8.586L4.707 3.293a1 1 0 00-1.414 1.414L8.586 10l-5.293 5.293a1 1 0 001.414 1.414L10 11.414l5.293 5.293a1 1 0 001.414-1.414L11.414 10l5.293-5.293a1 1 0 00-1.414-1.414L10 8.586z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
        <div class="p-4">
          <form id="returnOrderForm">
            <input type="hidden" id="orderIdReturn" name="orderId" value="" />
            <div class="mb-4">
              <label for="returnReason" class="block text-sm font-medium text-gray-700">Reason for Return</label>
              <textarea
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                id="returnReason" name="returnReason" rows="3" required></textarea>
            </div>
            <button id="submitReturnOrder" type="submit"
              class="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
              Submit Return
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <%- include('footer') %>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
      function showCancelModal(orderId) {
        console.log(orderId);

        document.getElementById("orderIdCancel").value = orderId;

        document.getElementById("cancelOrderModal").classList.remove("hidden");
      }

      function showReturnModal(orderId) {
        document.getElementById("orderIdReturn").value = orderId;
        document.getElementById("modalreturnOrder").classList.remove("hidden");
      }

      // Hide modal when close button is clicked
      document
        .querySelector('[data-bs-dismiss="modal"]')
        .addEventListener("click", function () {
          document.getElementById("cancelOrderModal").classList.add("hidden");
        });

      document
        .getElementById("returnModalCloseButton")
        .addEventListener("click", function () {
          document.getElementById("modalreturnOrder").classList.add("hidden");
        });

      document
        .getElementById("submitCancelOrder")
        .addEventListener("click", function () {
          const orderId = document.getElementById("orderIdCancel").value;
          const cancelReason = document.getElementById("cancelReason").value;

          if (cancelReason.trim() === "") {
            Swal.fire({
              icon: "Warning",
              title: "Reason required",
              text: "Please provied a reson for cancelling the order",
            });
            return;
          }

          fetch("/cancelOrder", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ orderId, cancelReason }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.message) {
                Swal.fire({
                  icon: "success",
                  title: "Order cancelled",
                  text: "order cancelled successfully",
                  text: data.message, // Message from the controller
                  confirmButtonText: "OK",
                }).then((result) => {
                  if (result.isConfirmed) {
                    document
                      .getElementById("cancelOrderModal")
                      .classList.add("hidden"); // Close the modal
                    window.location.href = "/orders";
                  }
                });
              } else {
                Swal.fire({
                  icon: "Warning",
                  title: "Failed to cancel order",
                  text: data.message || "An error occurred. Please try again.",
                });
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              Swal.fire({
                icon: "error",
                title: "Error",
                text:
                  data.message || "An error occurred while cancelling the order.",
              });
            })
            .then((result) => {
              if (result.isConfirmed) {
                document.getElementById("modalreturnOrder").classList.add("hidden");
                window.location.href = "/orders";
              }
            });
        });

      // Retun order

      document
        .getElementById("submitReturnOrder")
        .addEventListener("click", function () {
          const orderId = document.getElementById("orderIdReturn").value;
          const returnReason = document.getElementById("returnReason").value;

          // Ensure return reason is filled
          if (!returnReason) {
            Swal.fire({
              icon: "warning",
              title: "Return reason required",
              text: "Please provide a reason for returning the order.",
            });
            return;
          }

          fetch("/returnOrder", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ orderId, returnReason }),
          })
            .then((response) => response.json())
            .then((data) => {
              console.log("hitttt");

              if (data.status === "success") {
                Swal.fire({
                  icon: "success",
                  title: "Order Returned",
                  text: data.message, // Message from the controller
                  confirmButtonText: "OK",
                  timer: 3000,
                })
                  .then((result) => {
                    if (result.isConfirmed) {
                      document.getElementById('modalreturnOrder').classList.add('hidden');
                      window.location.href = '/orders';
                    }
                  });
              } else {
                alert("hittt else")
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              Swal.fire({
                icon: "error",
                title: "Error",
                text: "An error occurred while returning the order. Please try again later.",
              });
            });
        });


      function payNow(totalAmount, orderId) {
        console.log(totalAmount);

        const URL = `/paymentRender/${totalAmount}`;

        fetch(URL, {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          }
        })
          .then(res => {
            if (!res.ok) {
              throw new Error("Cannot render the payment page");
            }
            return res.json();
          })
          .then(data => {
            if (data.orderId) {
              const options = {
                key: "rzp_test_OZVJGxiPWQgDaM",  // Replace with your Razorpay key
                amount: totalAmount * 100,  // Razorpay accepts amounts in paise
                currency: "INR",
                name: "GameNation",
                order_id: data.orderId,  // Razorpay Order ID
                handler: function (response) {
                  // Successful payment handler
                  fetch('/rePay', {
                    method: 'POST',
                    headers: {
                      'Content-Type': "application/json"
                    },
                    body: JSON.stringify({ orderId: orderId })  // Pass orderId as an object
                  })
                    .then(async (response) => {
                      if (response.ok) {
                        Swal.fire({
                          position: "center",
                          icon: "success",
                          title: "Payment Success",
                          text: "Your payment was successful!",
                          showConfirmButton: false,
                          timer: 2000,
                        });
                        const result = await response.json();

                        setTimeout(() => {
                          window.location.reload();  // Refresh the page
                        }, 2000);
                      } else {
                        Swal.fire({
                          position: "center",
                          icon: "error",
                          title: "Payment Failed",
                          text: "Your payment failed. Please try again.",
                          showConfirmButton: false,
                          timer: 2000,
                        });
                      }
                    })
                    .catch(error => {
                      console.error("Error while re-paying amount:", error);
                      Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while processing the payment.',
                      });
                    });
                },
                prefill: {
                  name: "Your Name",
                  email: "your.email@example.com",
                  contact: "9999999999",
                },
                notes: {
                  address: "Razorpay Corporate Office"
                },
                theme: {
                  color: "#3399cc"
                }
              };
              const rzp1 = new Razorpay(options);
              rzp1.open();
            }
          })
          .catch(error => {
            console.error("Error during the payment render:", error);
            Swal.fire({
              icon: 'error',
              title: 'Payment Error',
              text: "Unable to process the payment. Please try again.",
            });
          });
      }

    </script>