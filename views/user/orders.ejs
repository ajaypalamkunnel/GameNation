<%- include('header') %>

<!-- Breadcrumb Navigation -->
<div class="bg-gray-800 border-b border-gray-700">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <nav class="flex items-center py-3" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2">
        <li>
          <a href="/" class="text-gray-300 hover:text-white transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
            </svg>
            Home
          </a>
        </li>
        <li>
          <svg class="w-4 h-4 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
          </svg>
        </li>
        <li>
          <span class="text-gray-400 font-medium">Orders</span>
        </li>
      </ol>
    </nav>
  </div>
</div>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 min-h-screen">
    <!-- Header Section -->
    <div class="bg-gray-800 shadow-lg border-b border-gray-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <h1 class="text-2xl font-bold text-white">My Orders</h1>
                <div class="text-sm text-gray-300">
                    <% if (pagination && pagination.totalOrders > 0) { %>
                        Showing <%= pagination.startIndex %>-<%= pagination.endIndex %> of <%= pagination.totalOrders %> orders
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <% if (!orders || orders.length === 0) { %>
            <!-- Empty State -->
            <div class="text-center py-16">
                <div class="mx-auto h-24 w-24 text-gray-600 mb-4">
                    <i class="fas fa-shopping-bag text-6xl"></i>
                </div>
                <h3 class="text-lg font-medium text-white mb-2">No orders yet</h3>
                <p class="text-gray-400 mb-6">When you place orders, they'll appear here.</p>
                <a href="/shop" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200">
                    <i class="fas fa-shopping-cart mr-2"></i>
                    Start Shopping
                </a>
            </div>
        <% } else { %>
            <!-- Orders List -->
            <div class="space-y-6">
                <% orders.forEach(order => { %>
                    <div class="bg-gray-800 rounded-xl shadow-lg border border-gray-700 overflow-hidden hover:shadow-xl transition-all duration-200">
                        <!-- Order Header -->
                        <div class="bg-gray-700 px-6 py-4 border-b border-gray-600">
                            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                                <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                                    <div>
                                        <div class="flex items-center gap-2 mb-1">
                                            <span class="text-sm font-medium text-gray-300">Order ID:</span>
                                            <span class="text-sm font-mono text-white"><%= order.order_id %></span>
                                        </div>
                                        <div class="flex items-center gap-2">
                                            <span class="text-sm text-gray-400">
                                                <i class="far fa-calendar-alt mr-1"></i>
                                                <%= new Date(order.createdAt).toLocaleDateString('en-GB', { 
                                                    day: 'numeric', 
                                                    month: 'short', 
                                                    year: 'numeric' 
                                                }) %>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex items-center">
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium
                                            <% if (order.orderStatus === 'Delivered') { %>
                                                bg-green-900 text-green-300 border border-green-800
                                            <% } else if (order.orderStatus === 'Cancelled') { %>
                                                bg-red-900 text-red-300 border border-red-800
                                            <% } else if (order.orderStatus === 'Returned') { %>
                                                bg-yellow-900 text-yellow-300 border border-yellow-800
                                            <% } else if (order.orderStatus === 'Shipped') { %>
                                                bg-blue-900 text-blue-300 border border-blue-800
                                            <% } else { %>
                                                bg-gray-600 text-gray-300 border border-gray-500
                                            <% } %>">
                                            <i class="fas fa-circle text-xs mr-1"></i>
                                            <%= order.orderStatus %>
                                        </span>
                                    </div>
                                </div>
                                
                                <!-- Action Buttons -->
                                <div class="flex items-center gap-2">
                                    <% if (['Confirmed', 'Pending', 'Shipped'].includes(order.orderStatus)) { %>
                                        <button onclick="showCancelModal('<%= order._id %>')" 
                                                class="inline-flex items-center px-3 py-2 text-xs font-medium text-red-300 bg-red-900 border border-red-800 rounded-lg hover:bg-red-800 transition-colors duration-200">
                                            <i class="fas fa-times mr-1"></i>
                                            Cancel
                                        </button>
                                    <% } else if (order.orderStatus === 'Delivered') { %>
                                        <button onclick="showReturnModal('<%= order._id %>')" 
                                                class="inline-flex items-center px-3 py-2 text-xs font-medium text-orange-300 bg-orange-900 border border-orange-800 rounded-lg hover:bg-orange-800 transition-colors duration-200">
                                            <i class="fas fa-undo mr-1"></i>
                                            Return
                                        </button>
                                    <% } %>
                                    
                                    <% if (order.paymentStatus === 'Pending' && ['razorpay', 'Wallet'].includes(order.paymentMethod)) { %>
                                        <button onclick="payNow('<%= order.priceAfterCouponDiscount.toFixed() %>', '<%= order.order_id %>')" 
                                                class="inline-flex items-center px-3 py-2 text-xs font-medium text-green-300 bg-green-900 border border-green-800 rounded-lg hover:bg-green-800 transition-colors duration-200">
                                            <i class="fas fa-credit-card mr-1"></i>
                                            Pay Now
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Products List -->
                        <div class="p-6">
                            <div class="space-y-4">
                                <% order.products.forEach(product => { %>
                                    <div class="flex gap-4 p-4 bg-gray-700 rounded-lg border border-gray-600">
                                        <!-- Product Image -->
                                        <div class="flex-shrink-0">
                                            <% if (product.product_id && product.product_id.image && product.product_id.image.length > 0) { %>
                                                <img src="<%= product.product_id.image[0] %>" 
                                                     alt="<%= product.product_name %>" 
                                                     class="w-16 h-16 object-cover rounded-lg border border-gray-600">
                                            <% } else { %>
                                                <div class="w-16 h-16 bg-gray-600 rounded-lg flex items-center justify-center border border-gray-500">
                                                    <i class="fas fa-image text-gray-400"></i>
                                                </div>
                                            <% } %>
                                        </div>

                                        <!-- Product Details -->
                                        <div class="flex-1 min-w-0">
                                            <h4 class="text-sm font-medium text-white truncate">
                                                <%= product.product_name %>
                                            </h4>
                                            <div class="mt-1 flex items-center gap-4 text-sm text-gray-300">
                                                <span>Qty: <%= product.product_quantity %></span>
                                                <span>₹<%= product.product_price.toFixed(2) %></span>
                                            </div>
                                        </div>

                                        <!-- Product Total -->
                                        <div class="flex-shrink-0 text-right">
                                            <div class="text-sm font-medium text-white">
                                                ₹<%= (product.product_price * product.product_quantity).toFixed(2) %>
                                            </div>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>

                            <!-- Order Footer -->
                            <div class="mt-6 pt-4 border-t border-gray-600">
                                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                                    <a href="/orderView?orderId=<%= order._id %>" 
                                       class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-300 bg-blue-900 border border-blue-800 rounded-lg hover:bg-blue-800 transition-colors duration-200">
                                        <i class="fas fa-eye mr-2"></i>
                                        View Details
                                    </a>
                                    
                                    <div class="text-right">
                                        <div class="text-sm text-gray-400 mb-1">Order Total</div>
                                        <div class="text-lg font-bold text-white">
                                            ₹<%= (order.totalPrice - order.couponDiscount).toFixed(2) %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>

            <!-- Pagination -->
            <% if (pagination && pagination.totalPages > 1) { %>
                <div class="mt-8 flex items-center justify-between">
                    <div class="text-sm text-gray-300">
                        Showing <span class="font-medium text-white"><%= pagination.startIndex %></span> to 
                        <span class="font-medium text-white"><%= pagination.endIndex %></span> of 
                        <span class="font-medium text-white"><%= pagination.totalOrders %></span> results
                    </div>
                    
                    <div class="flex items-center space-x-2">
                        <!-- Previous Button -->
                        <% if (pagination.hasPrevPage) { %>
                            <a href="?page=<%= pagination.prevPage %>&limit=<%= pagination.limit %>" 
                               class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors duration-200">
                                <i class="fas fa-chevron-left mr-1"></i>
                                Previous
                            </a>
                        <% } else { %>
                            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-700 border border-gray-600 rounded-lg cursor-not-allowed">
                                <i class="fas fa-chevron-left mr-1"></i>
                                Previous
                            </span>
                        <% } %>

                        <!-- Page Numbers -->
                        <div class="hidden sm:flex space-x-1">
                            <% 
                                const startPage = Math.max(1, pagination.currentPage - 2);
                                const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
                                
                                if (startPage > 1) { %>
                                    <a href="?page=1&limit=<%= pagination.limit %>" 
                                       class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors duration-200">1</a>
                                    <% if (startPage > 2) { %>
                                        <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-400">...</span>
                                    <% } %>
                                <% }
                                
                                for (let i = startPage; i <= endPage; i++) { %>
                                    <% if (i === pagination.currentPage) { %>
                                        <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-blue-300 bg-blue-900 border border-blue-800 rounded-lg">
                                            <%= i %>
                                        </span>
                                    <% } else { %>
                                        <a href="?page=<%= i %>&limit=<%= pagination.limit %>" 
                                           class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors duration-200">
                                            <%= i %>
                                        </a>
                                    <% } %>
                                <% }
                                
                                if (endPage < pagination.totalPages) { %>
                                    <% if (endPage < pagination.totalPages - 1) { %>
                                        <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-400">...</span>
                                    <% } %>
                                    <a href="?page=<%= pagination.totalPages %>&limit=<%= pagination.limit %>" 
                                       class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors duration-200">
                                        <%= pagination.totalPages %>
                                    </a>
                                <% } %>
                        </div>

                        <!-- Next Button -->
                        <% if (pagination.hasNextPage) { %>
                            <a href="?page=<%= pagination.nextPage %>&limit=<%= pagination.limit %>" 
                               class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-300 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors duration-200">
                                Next
                                <i class="fas fa-chevron-right ml-1"></i>
                            </a>
                        <% } else { %>
                            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-gray-700 border border-gray-600 rounded-lg cursor-not-allowed">
                                Next
                                <i class="fas fa-chevron-right ml-1"></i>
                            </span>
                        <% } %>
                    </div>
                </div>
            <% } %>
        <% } %>
    </div>

    <!-- Cancel Order Modal -->
    <div id="cancelOrderModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
        <div class="flex min-h-screen items-center justify-center p-4">
            <div class="fixed inset-0 bg-black bg-opacity-75 transition-opacity"></div>
            <div class="relative w-full max-w-md transform overflow-hidden rounded-lg bg-gray-800 border border-gray-700 shadow-xl transition-all">
                <div class="bg-gray-800 px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-900 sm:mx-0 sm:h-10 sm:w-10">
                            <i class="fas fa-exclamation-triangle text-red-300"></i>
                        </div>
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 class="text-lg font-medium leading-6 text-white">Cancel Order</h3>
                            <div class="mt-4">
                                <label for="cancelReason" class="block text-sm font-medium text-gray-300 mb-2">
                                    Reason for cancellation
                                </label>
                                <textarea id="cancelReason" rows="3" 
                                          class="w-full rounded-md bg-gray-700 border-gray-600 text-white placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                          placeholder="Please provide a reason for cancelling this order..."></textarea>
                                <input type="hidden" id="orderIdCancel">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-700 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <button type="button" id="submitCancelOrder"
                            class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 transition-colors duration-200 sm:ml-3 sm:w-auto">
                        Confirm Cancel
                    </button>
                    <button type="button" onclick="closeCancelModal()"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-gray-600 px-3 py-2 text-sm font-semibold text-gray-300 shadow-sm border border-gray-500 hover:bg-gray-500 hover:text-white transition-colors duration-200 sm:mt-0 sm:w-auto">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="modalreturnOrder" class="fixed inset-0 z-50 hidden overflow-y-auto">
        <div class="flex min-h-screen items-center justify-center p-4">
            <div class="fixed inset-0 bg-black bg-opacity-75 transition-opacity"></div>
            <div class="relative w-full max-w-md transform overflow-hidden rounded-lg bg-gray-800 border border-gray-700 shadow-xl transition-all">
                <div class="bg-gray-800 px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-orange-900 sm:mx-0 sm:h-10 sm:w-10">
                            <i class="fas fa-undo text-orange-300"></i>
                        </div>
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 class="text-lg font-medium leading-6 text-white">Return Order</h3>
                            <div class="mt-4">
                                <label for="returnReason" class="block text-sm font-medium text-gray-300 mb-2">
                                    Reason for return
                                </label>
                                <textarea id="returnReason" rows="3" 
                                          class="w-full rounded-md bg-gray-700 border-gray-600 text-white placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                          placeholder="Please provide a reason for returning this order..."></textarea>
                                <input type="hidden" id="orderIdReturn">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-700 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <button type="button" id="submitReturnOrder"
                            class="inline-flex w-full justify-center rounded-md bg-orange-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-orange-500 transition-colors duration-200 sm:ml-3 sm:w-auto">
                        Submit Return
                    </button>
                    <button type="button" onclick="closeReturnModal()"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-gray-600 px-3 py-2 text-sm font-semibold text-gray-300 shadow-sm border border-gray-500 hover:bg-gray-500 hover:text-white transition-colors duration-200 sm:mt-0 sm:w-auto">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        // Modal functions
        function showCancelModal(orderId) {
            document.getElementById("orderIdCancel").value = orderId;
            document.getElementById("cancelOrderModal").classList.remove("hidden");
        }

        function showReturnModal(orderId) {
            document.getElementById("orderIdReturn").value = orderId;
            document.getElementById("modalreturnOrder").classList.remove("hidden");
        }

        function closeCancelModal() {
            document.getElementById("cancelOrderModal").classList.add("hidden");
            document.getElementById("cancelReason").value = "";
        }

        function closeReturnModal() {
            document.getElementById("modalreturnOrder").classList.add("hidden");
            document.getElementById("returnReason").value = "";
        }

        // Cancel order handler
        document.getElementById("submitCancelOrder").addEventListener("click", function () {
            const orderId = document.getElementById("orderIdCancel").value;
            const cancelReason = document.getElementById("cancelReason").value.trim();

            if (!cancelReason) {
                Swal.fire({
                    icon: "warning",
                    title: "Reason Required",
                    text: "Please provide a reason for cancelling the order",
                    background: '#1f2937',
                    color: '#fff',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            fetch("/cancelOrder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId, cancelReason }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    Swal.fire({
                        icon: "success",
                        title: "Order Cancelled",
                        text: data.message,
                        confirmButtonText: "OK",
                        background: '#1f2937',
                        color: '#fff',
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        closeCancelModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Failed to Cancel Order",
                        text: data.message || "An error occurred. Please try again.",
                        background: '#1f2937',
                        color: '#fff',
                        confirmButtonColor: '#ef4444'
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "An error occurred while cancelling the order.",
                    background: '#1f2937',
                    color: '#fff',
                    confirmButtonColor: '#ef4444'
                });
            });
        });

        // Return order handler
        document.getElementById("submitReturnOrder").addEventListener("click", function () {
            const orderId = document.getElementById("orderIdReturn").value;
            const returnReason = document.getElementById("returnReason").value.trim();

            if (!returnReason) {
                Swal.fire({
                    icon: "warning",
                    title: "Return Reason Required",
                    text: "Please provide a reason for returning the order.",
                    background: '#1f2937',
                    color: '#fff',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            fetch("/returnOrder", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId, returnReason }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === "success") {
                    Swal.fire({
                        icon: "success",
                        title: "Order Returned",
                        text: data.message,
                        confirmButtonText: "OK",
                        timer: 3000,
                        background: '#1f2937',
                        color: '#fff',
                        confirmButtonColor: '#10b981'
                    }).then(() => {
                        closeReturnModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Failed to Return Order",
                        text: data.message || "An error occurred. Please try again.",
                        background: '#1f2937',
                        color: '#fff',
                        confirmButtonColor: '#ef4444'
                    });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "An error occurred while returning the order. Please try again later.",
                    background: '#1f2937',
                    color: '#fff',
                    confirmButtonColor: '#ef4444'
                });
            });
        });

        // Payment function
        function payNow(totalAmount, orderId) {
            const URL = `/paymentRender/${totalAmount}`;

            fetch(URL, {
                method: 'POST',
                headers: { "Content-Type": "application/json" }
            })
            .then(res => {
                if (!res.ok) {
                    throw new Error("Cannot render the payment page");
                }
                return res.json();
            })
            .then(data => {
                if (data.orderId) {
                    const options = {
                        key: "rzp_test_OZVJGxiPWQgDaM",
                        amount: totalAmount * 100,
                        currency: "INR",
                        name: "GameNation",
                        order_id: data.orderId,
                        handler: function (response) {
                            fetch('/rePay', {
                                method: 'POST',
                                headers: { 'Content-Type': "application/json" },
                                body: JSON.stringify({ orderId: orderId })
                            })
                            .then(async (response) => {
                                if (response.ok) {
                                    Swal.fire({
                                        position: "center",
                                        icon: "success",
                                        title: "Payment Success",
                                        text: "Your payment was successful!",
                                        showConfirmButton: false,
                                        timer: 2000,
                                        background: '#1f2937',
                                        color: '#fff'
                                    });
                                    setTimeout(() => {
                                        window.location.reload();
                                    }, 2000);
                                } else {
                                    Swal.fire({
                                        position: "center",
                                        icon: "error",
                                        title: "Payment Failed",
                                        text: "Your payment failed. Please try again.",
                                        showConfirmButton: false,
                                        timer: 2000,
                                    });
                                }
                            })
                            .catch(error => {
                                console.error("Error while re-paying amount:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred while processing the payment.',
                                });
                            });
                        },
                        prefill: {
                            name: "Your Name",
                            email: "your.email@example.com",
                            contact: "9999999999",
                        },
                        notes: { address: "Razorpay Corporate Office" },
                        theme: { color: "#3399cc" }
                    };
                    const rzp1 = new Razorpay(options);
                    rzp1.open();
                }
            })
            .catch(error => {
                console.error("Error during the payment render:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Error',
                    text: "Unable to process the payment. Please try again.",
                });
            });
        }

        // Close modals on outside click
        document.addEventListener('click', function(event) {
            const cancelModal = document.getElementById('cancelOrderModal');
            const returnModal = document.getElementById('modalreturnOrder');
            
            if (event.target === cancelModal) {
                closeCancelModal();
            }
            if (event.target === returnModal) {
                closeReturnModal();
            }
        });

        // Close modals on escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeCancelModal();
                closeReturnModal();
            }
        });
    </script>
</body>
</html>