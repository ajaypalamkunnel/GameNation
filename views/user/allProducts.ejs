<%- include('header') %>
<div class="bg-[#121212] p-2">
  <nav class="flex items-center text-sm text-gray-400 space-x-2 ml-2">
    <a href="/" class="hover:text-green-400 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M13 5v6h6" /></svg>
      Home
    </a>
    <span>/</span>
    <span class="text-green-400">Products</span>
  </nav>
</div>

<div class="bg-[#121212] min-h-screen p-4 md:p-8">
  <!-- Search, Sort, Filter Bar -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
    <div class="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
      <div class="flex flex-1">
        <input type="text" id="search" value="<%= returnQuery ? returnQuery : '' %>" placeholder="Search products..." class="flex-1 p-3 rounded-l-lg bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-green-500 shadow-md" />
        <button id="searchBtn" class="bg-green-600 text-white px-4 py-2 rounded-r-lg hover:bg-green-700 shadow-md">Search</button>
      </div>
      <button id="clearSearchBtn" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 shadow-md">Clear</button>
    </div>
    <div class="flex gap-2 w-full md:w-auto">
      <select class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 shadow-md" id="sortDropdown" onchange="sort(this.value)">
        <option value="">Sort</option>
        <option value="lowToHigh">Price: Low to High</option>
        <option value="highToLow">Price: High to Low</option>
        <option value="aToZ">Name: A - Z</option>
        <option value="zToA">Name: Z - A</option>
      </select>
      <button id="filterBtn" class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 shadow-md">Filter</button>
      <button id="clearBtn" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 shadow-md">Clear Filter</button>
    </div>
  </div>

  <!-- Filter Modal -->
  <div id="filterModal" class="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center hidden z-50">
    <div class="bg-gray-900 bg-opacity-95 p-8 rounded-2xl shadow-2xl w-full max-w-lg relative border border-gray-700">
      <button id="closeFilterModal" class="absolute top-4 right-4 text-white bg-red-500 hover:bg-red-600 p-2 rounded-full text-xl">&times;</button>
      <h2 class="text-2xl font-bold mb-6 text-white text-center tracking-wide">Apply Filters</h2>
      <form id="filterForm" class="space-y-6">
        <div>
          <label for="category" class="text-white block mb-1">Category:</label>
          <select id="category" name="category" class="w-full bg-gray-800 text-white p-3 rounded-lg border border-gray-700">
            <option value="">Select Category</option>
            <!-- Dynamically populated -->
          </select>
        </div>
        <div class="flex gap-4">
          <div class="flex-1">
            <label for="minPrice" class="text-white block mb-1">Min Price:</label>
            <input type="number" id="minPrice" name="minPrice" class="w-full bg-gray-800 text-white p-3 rounded-lg border border-gray-700" />
          </div>
          <div class="flex-1">
            <label for="maxPrice" class="text-white block mb-1">Max Price:</label>
            <input type="number" id="maxPrice" name="maxPrice" class="w-full bg-gray-800 text-white p-3 rounded-lg border border-gray-700" />
          </div>
        </div>
        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-lg w-full font-semibold shadow-md">Apply Filters</button>
      </form>
    </div>
  </div>

  <!-- Product Grid -->
  <div class="product-list grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 justify-items-center">
    <% products.forEach(product => { %>
      <div class="w-full max-w-xs bg-gray-900 rounded-2xl shadow-lg hover:shadow-2xl transition-shadow duration-300 flex flex-col">
        <a href="/productView/<%= product._id %>" class="block">
          <div class="relative">
            <img class="h-56 w-full object-cover object-center rounded-t-2xl" src="<%= product.image[0] %>" alt="product image" />
            <% if (product.discountPrice < product.price) { %>
              <span class="absolute top-3 left-3 bg-green-600 text-white text-xs font-bold px-3 py-1 rounded-full shadow">SALE</span>
            <% } %>
          </div>
        </a>
        <div class="p-5 flex flex-col flex-1">
          <a href="/productView/<%= product._id %>">
            <h5 class="text-lg font-semibold tracking-tight text-white mb-2 truncate"><%= product.product_name %></h5>
          </a>
          <div class="flex items-center mb-3">
            <% const totalStars = 5; %>
            <% const filledStars = Math.round(3 || 0); %>
            <% const emptyStars = totalStars - filledStars; %>
            <% for (let i = 0; i < filledStars; i++) { %>
              <span class="text-yellow-400 text-lg">★</span>
            <% } %>
            <% for (let i = 0; i < emptyStars; i++) { %>
              <span class="text-gray-600 text-lg">☆</span>
            <% } %>
            <span class="ml-2 text-xs text-gray-400">(<%= filledStars.toFixed(1) %>)</span>
          </div>
          <div class="flex items-center justify-between mt-auto">
            <div>
              <span class="text-2xl font-bold text-green-400">₹<%= product.discountPrice %></span>
              <span class="text-sm text-gray-400 line-through ml-2">₹<%= product.price %></span>
            </div>
            <button class="add-to-cart-btn flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-semibold text-white hover:bg-green-700 transition-colors duration-200 shadow" data-product-id="<%= product._id %>">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.35 2.7A2 2 0 0 0 7.6 19h8.8a2 2 0 0 0 1.95-2.3L17 13M7 13V6a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v7" /></svg>
              Add to cart
            </button>
          </div>
        </div>
      </div>
    <% }) %>
  </div>

  <!-- Pagination -->
  <div class="flex justify-center mt-10">
    <nav class="inline-flex space-x-2">
      <% if (currentPage > 1) { %>
        <a href="/allProducts?page=<%= currentPage - 1 %>&limit=10&category=<%= category %>&minPrice=<%= minPrice %>&maxPrice=<%= maxPrice %>" class="px-4 py-2 bg-gray-800 text-white rounded-full hover:bg-gray-700 shadow">Previous</a>
      <% } %>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a href="/allProducts?page=<%= i %>&limit=10&category=<%= category %>&minPrice=<%= minPrice %>&maxPrice=<%= maxPrice %>" class="px-4 py-2 rounded-full transition-all duration-200 <% if (i === currentPage) { %> bg-green-600 text-white shadow-lg <% } else { %> bg-gray-800 text-white hover:bg-gray-700 shadow <% } %>"><%= i %></a>
      <% } %>
      <% if (currentPage < totalPages) { %>
        <a href="/allProducts?page=<%= currentPage + 1 %>&limit=10&category=<%= category %>&minPrice=<%= minPrice %>&maxPrice=<%= maxPrice %>" class="px-4 py-2 bg-gray-800 text-white rounded-full hover:bg-gray-700 shadow">Next</a>
      <% } %>
    </nav>
  </div>
</div>

<script>
function sort(sortValue){
  const query = document.querySelector('#search').value;
  console.log("---",query);
  
  const category = document.getElementById('category').value || '';
  const minPrice = document.getElementById('minPrice').value || '';
  const maxPrice = document.getElementById('maxPrice').value || '';
 

  let queryParams = new URLSearchParams({
    sort: sortValue,
    query: query,
    category: category,
    minPrice: minPrice,
    maxPrice: maxPrice,
    page: 1 // Reset to page 1 when sorting
  });

  window.location.href = `/allProducts?${queryParams.toString()}`;
}

document.querySelector('#searchBtn').addEventListener('click', function (event) {
  event.preventDefault();
  
  const query = document.querySelector('#search').value;

  fetch(`/search?query=${encodeURIComponent(query)}`)
    .then(response => response.json())
    .then(data => {

      console.log(data);
      
      const productList = document.querySelector('.product-list');
      productList.innerHTML = ''; // Clear current list

      if (data.products.length > 0) {
        data.products.forEach(product => {
          // Create the product card elements manually
          const productCard = document.createElement('div');
          productCard.classList.add('mb-3', 'w-72', 'rounded-lg');

          const productLink = document.createElement('a');
          productLink.href = `/productView/${product._id}`;

          const productWrapper = document.createElement('div');
          productWrapper.classList.add('rounded-lg', 'bg-white', 'shadow-md');

          const productImage = document.createElement('img');
          productImage.classList.add('h-60', 'w-full', 'object-cover', 'object-center', 'rounded-t-lg');
          productImage.src = product.image[0];
          productImage.alt = 'Product Image';

          const productInfo = document.createElement('div');
          productInfo.classList.add('p-5');

          const productName = document.createElement('h5');
          productName.classList.add('text-xl', 'font-semibold', 'tracking-tight', 'text-slate-900');
          productName.textContent = product.product_name;

          const ratingContainer = document.createElement('div');
          ratingContainer.classList.add('mt-2.5', 'mb-5', 'flex', 'items-center');
          const totalStars = 5;
          const filledStars = Math.round(product.rating || 0); // Use product rating
          const emptyStars = totalStars - filledStars;

          // Add filled stars
          for (let i = 0; i < filledStars; i++) {
            const star = document.createElement('span');
            star.classList.add('text-yellow-500', 'text-xl');
            star.textContent = '★';
            ratingContainer.appendChild(star);
          }

          // Add empty stars
          for (let i = 0; i < emptyStars; i++) {
            const star = document.createElement('span');
            star.classList.add('text-gray-400', 'text-xl');
            star.textContent = '☆';
            ratingContainer.appendChild(star);
          }

          const productPriceContainer = document.createElement('div');
          productPriceContainer.classList.add('flex', 'items-center', 'justify-between');

          const priceInfo = document.createElement('p');
          const discountPrice = document.createElement('span');
          discountPrice.classList.add('text-3xl', 'font-bold', 'text-slate-900');
          discountPrice.textContent = `₹${product.discountPrice}`;
          const originalPrice = document.createElement('span');
          originalPrice.classList.add('text-sm', 'text-slate-900', 'line-through');
          originalPrice.textContent = `₹${product.price}`;

          priceInfo.appendChild(discountPrice);
          priceInfo.appendChild(originalPrice);

          const addToCartBtn = document.createElement('button');
          addToCartBtn.classList.add('add-to-cart-btn', 'flex', 'items-center', 'rounded-md', 'bg-slate-900', 'px-5', 'py-2.5', 'text-center', 'text-sm', 'font-medium', 'text-white', 'hover:bg-gray-700');
          addToCartBtn.textContent = 'Add to cart';
          addToCartBtn.setAttribute('data-product-id', product._id);

          // Event listener for add to cart
          addToCartBtn.addEventListener('click', function () {
            const productId = this.getAttribute('data-product-id');
            addToCart(productId);
          });

          // Assemble the product card
          productPriceContainer.appendChild(priceInfo);
          productPriceContainer.appendChild(addToCartBtn);

          productInfo.appendChild(productName);
          productInfo.appendChild(ratingContainer);
          productInfo.appendChild(productPriceContainer);

          productWrapper.appendChild(productImage);
          productWrapper.appendChild(productInfo);
          productLink.appendChild(productWrapper);
          productCard.appendChild(productLink);

          // Append the product card to the product list
          productList.appendChild(productCard);
        });
      } else {
        productList.innerHTML = `<p class="text-white">No products found for "${query}".</p>`;
      }
    })
    .catch(error => {
      console.error('Error fetching the products:', error);
    });
});


document.querySelector("#clearSearchBtn").addEventListener('click',function(event){

  event.preventDefault();

  window.location.href = '/allProducts'

})


//--------------------- filter ---------------------------------------
document.getElementById('filterBtn').addEventListener('click', () => {

  
productDataFetch()

  document.getElementById('filterModal').classList.remove('hidden');
});


function productDataFetch(){

  fetch(`/allproducts/filter-modal`,{
    method:'GET',
    headers:{
      'Content-Type': 'application/json'
    }

  })
  .then(response=>response.json())
  .then((data)=>{
    const categoryDropdown = document.getElementById('category');
    categoryDropdown.innerHTML = '<option value="">Select Category</option>';

    data.categories.forEach((cat)=>{
      console.log("----",cat.collectionName);
      
      const option = document.createElement('option');
      option.value = cat._id;
      option.textContent = cat.collectionName;
      categoryDropdown.appendChild(option)
    })

  })
  .catch((error)=>{
    
  })


}



document.getElementById('filterForm').addEventListener('submit',function(event){
  event.preventDefault()

  const category = document.getElementById('category').value;
  const minPrice = document.getElementById('minPrice').value;
  const maxPrice = document.getElementById('maxPrice').value;
  const query = document.querySelector('#search').value;

  console.log(minPrice,"--------",maxPrice,"-------",category);
  

  let quertParams = new URLSearchParams({
    category,
    minPrice,
    maxPrice,
    page:1,
    query
  
  })

  
  window.location.href = `/allProducts?category=${category}&minPrice=${minPrice}&maxPrice=${maxPrice}&query=${query}`
})


document.getElementById('clearBtn').addEventListener('click',()=>{
  window.location.href = '/allProducts';
})

document.getElementById('closeFilterModal').addEventListener('click', () => {
  document.getElementById('filterModal').classList.add('hidden');
});
const addToCart = async (productId)=>{
    try {
      const response = await fetch('/cart/add',{
        method:'POST',
        headers:{
          'content-Type' : 'application/json'
        },
        body:JSON.stringify({
          productId : productId,
          productCount:1
        })
      })

      const data = await response.json();

      if(response.ok){
        Swal.fire({
          postion:"top-center",
          icon:"success",
          title:"Item added to cart",
          showConfirmButton: false,
          time:500

        })
          
      }else{
        Swal.fire({
        icon: 'error',
        title: 'Error',
        text: data.message || 'Failed to add item to cart',
        confirmButtonText: 'OK',
      });
      }
    } catch (error) {
      console.error('Error adding to cart:', error);

      Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while adding the item to the cart.',
      confirmButtonText: 'OK',
    });
      
    }
  }

  document.querySelectorAll('.add-to-cart-btn').forEach(button=>{
    button.addEventListener('click',function(){
      const productId = this.getAttribute('data-product-id');
      addToCart(productId)
    })
  })


//---------------------filter ---------------------------------------

</script>
