<%- include('header') %>
<section class="bg-white py-8 antialiased dark:bg-gray-900 md:py-16">
    <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white sm:text-2xl">Shopping Cart</h2>
  
      <div class="mt-6 sm:mt-8 md:gap-6 lg:flex lg:items-start xl:gap-8">
        <div class="mx-auto w-full flex-none lg:max-w-2xl xl:max-w-4xl">
          <div class="space-y-6">
            <% if(cartItems.length > 0) {%>
              <% cartItems.forEach((item, index) => { %>
              <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800 md:p-6">
                <div class="space-y-4 md:flex md:items-center md:justify-between md:gap-6 md:space-y-0">
                  <a href="#" class="shrink-0 md:order-1">
                    <img class="h-20 w-20 dark:hidden" src="<%= item.productImage %>" alt="<%= item.productName %>" />
                    <img class="hidden h-20 w-20 dark:block" src="<%= item.productImage %>" alt="<%= item.productName %>" />
                  </a>
          
                  <label for="counter-input" class="sr-only">Choose quantity:</label>
                  <div class="flex items-center justify-between md:order-3 md:justify-end">
                    <div class="flex items-center">
                      <!-- Decrement button with unique ID -->
                       
                      <button type="button" id="decrement-button-<%= index %>" data-input-counter-decrement="<%= item.productId._id %>" class="inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-md border border-gray-300 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-gray-700">
                        <svg class="h-2.5 w-2.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16" />
                        </svg>
                      </button>
          
                      <!-- Quantity with unique ID -->
                      <p id="product-quantity-<%= index %>" class="w-10 shrink-0 border-0 bg-transparent text-center text-sm font-medium text-gray-900 dark:text-white"><%= item.productCount %></p>
          
                      <!-- Increment button with unique ID -->
                      <button type="button" id="increment-button-<%= index %>" data-input-counter-increment="<%= item.productId._id %>" class="inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-md border border-gray-300 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-gray-700">
                        <svg class="h-2.5 w-2.5 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16" />
                        </svg>
                      </button>
                    </div>
          
                    <!-- Price with unique ID -->
                    <div class="text-end md:order-4 md:w-32">
                      <p id="product-price-<%= index %>" class="text-base font-bold text-gray-900 dark:text-white">₹<%= item.discountedPrice.toFixed(2) %></p>
                      <p class="text-sm text-gray-500">Original: ₹<%= item.productPrice.toFixed(2) %></p>
                    </div>
                  </div>
          
                  <div class="w-full min-w-0 flex-1 space-y-4 md:order-2 md:max-w-md">
                    <a href="#" class="text-base font-medium text-gray-900 hover:underline dark:text-white"><%= item.productName %></a>
          
                    <div class="flex items-center gap-4">
                      <button type="button" class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-900 hover:underline dark:text-gray-400 dark:hover:text-white">
                        <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.01 6.001C6.5 1 1 8 5.782 13.001L12.011 20l6.23-7C23 8 17.5 1 12.01 6.002Z" />
                        </svg>
                        Add to Favorites
                      </button>
          
                      <a href="javascript:void(0)" 
                      class="remove-item inline-flex items-center text-sm font-medium text-red-600 hover:underline dark:text-red-500" 
                      data-product-id="<%= item.productId._id %>">
                     <svg class="me-1.5 h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                       <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18 17.94 6M18 18 6.06 6" />
                     </svg>
                     Remove
                   </a>
                   
                    </div>
                  </div>
                </div>
              </div>
              <% }) %>
            <% } else { %>
              <p class="text-center text-gray-500">Your cart is empty</p>
            <% } %>
          </div>
          
  
        <div class="mx-auto mt-6 max-w-4xl flex-1 space-y-6 lg:mt-0 lg:w-full">
          <div class="space-y-4 rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800 sm:p-6">
            <p class="text-xl font-semibold text-gray-900 dark:text-white">Order summary</p>
  
            <div class="space-y-4">
              <div class="space-y-2">
                <dl class="flex items-center justify-between gap-4">
                  <dt class="text-base font-normal text-gray-500 dark:text-gray-400">Original price</dt>
                  <dd id="Original-price" class="text-base font-medium text-gray-900 dark:text-white">₹ <%= totalPayable.toFixed(2) %></dd>
                </dl>
  
                <dl class="flex items-center justify-between gap-4">
                  <dt class="text-base font-normal text-gray-500 dark:text-gray-400">Savings</dt>
                  <dd class="text-base font-medium text-green-600">-₹0.00</dd>
                </dl>
  
                <dl class="flex items-center justify-between gap-4">
                  <dt class="text-base font-normal text-gray-500 dark:text-gray-400">Store Pickup</dt>
                  <dd class="text-base font-medium text-gray-900 dark:text-white">₹0</dd>
                </dl>
  
                <dl class="flex items-center justify-between gap-4">
                  <dt class="text-base font-normal text-gray-500 dark:text-gray-400">Tax</dt>
                  <dd class="text-base font-medium text-gray-900 dark:text-white">₹0</dd>
                </dl>
              </div>
  
              <dl class="flex items-center justify-between gap-4 border-t border-gray-200 pt-2 dark:border-gray-700">
                <dt class="text-base font-bold text-gray-900 dark:text-white">Total</dt>
                <dd id="totalPayable" class="text-base font-bold text-gray-900 dark:text-white">₹ <%= totalPayable.toFixed(2) %></dd>
              </dl>
            </div>
  
            <a href="/checkout" class="flex w-full items-center justify-center rounded-lg bg-primary-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-primary-800 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">Proceed to Checkout</a>
  
            <div class="flex items-center justify-center gap-2">
              <span class="text-sm font-normal text-gray-500 dark:text-gray-400"> or </span>
              <a href="/home" title="" class="inline-flex items-center gap-2 text-sm font-medium text-primary-700 underline hover:no-underline dark:text-primary-500">
                Continue Shopping
                <svg class="h-5 w-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 12H5m14 0-4 4m4-4-4-4" />
                </svg>
              </a>
            </div>
          </div>
  
          
        </div>
      </div>
    </div>
  </section>

  <%- include('footer') %>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const incrementButtons = document.querySelectorAll("[data-input-counter-increment]");
      const decrementButtons = document.querySelectorAll("[data-input-counter-decrement]");
      const removeButtons = document.querySelectorAll(".remove-item");
      
      
  
      // Add event listener for increment buttons
      incrementButtons.forEach(button => {
        button.addEventListener("click", async function () {
          const productId = this.getAttribute("data-input-counter-increment");
          const index = this.id.split('-').pop(); // Extract index from the id
          await updateCartQuantity(productId, "increment", index);
        });
      });
  
      // Add event listener for decrement buttons
      decrementButtons.forEach(button => {
        button.addEventListener("click", async function () {
          const productId = this.getAttribute("data-input-counter-decrement");
          const index = this.id.split('-').pop(); // Extract index from the id
          await updateCartQuantity(productId, "decrement", index);
        });
      });


      removeButtons.forEach(button => {
      button.addEventListener("click", async function (event) {
      event.preventDefault(); // Prevent default action
      const productId = this.getAttribute("data-product-id") // Get product ID from href attribute or other attribute
      console.log("hiiiii");
      console.log(productId);
      
      
      await removeCartItem(productId);
    });
  });

      
  
      // Function to handle cart quantity update
      async function updateCartQuantity(productId, action, index) {

        console.log("produdct id : ",productId );
        
        try {
          const response = await fetch('/cart/update-quantity', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              productId: productId,
              action: action,
            }),
          });
  
          const data = await response.json();
  
          if (response.ok) {
            // Update the quantity and price in the UI
            const quantityElement = document.querySelector(`#product-quantity-${index}`);
            quantityElement.textContent = data.productCount;
  
            const priceElement = document.querySelector(`#product-price-${index}`);
            priceElement.textContent = `₹${data.productPrice.toFixed(2)}`;
  
            // Update the total price in the summary section
            const totalElement = document.querySelector('#totalPayable');
            totalElement.textContent = `₹${data.totalPayable.toFixed(2)}`;

            const OriginalPrice = document.querySelector('#Original-price');
            OriginalPrice.textContent = `₹${data.totalPayable.toFixed(2)}`;
          } else {
            alert(data.message);
          }
        } catch (error) {
          console.error('Error updating cart:', error);
        }
      }

      async function removeCartItem(productId){
        try {
          console.log("-----",productId);
          
          const response = await fetch('/cart/remove-item',{
            method:'POST',
            headers:{
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productId:productId
            })
          })

          const data = await response.json();

          if(response.ok){
            document.querySelector(`[data-product-id="${productId}"]`).remove();


             // Update the total price in the summary section
          const totalElement = document.querySelector('#totalPayable');
          totalElement.textContent = `₹${data.totalPayable.toFixed(2)}`;

          const OriginalPrice = document.querySelector('#Original-price');
          OriginalPrice.textContent = `₹${data.totalPayable.toFixed(2)}`;


          setTimeout(()=>{
            location.reload()
          },500)


          }else{
            alert(data.message)
          }
          
        } catch (error) {
          console.error('Error removing item from cart:', error);
          
        }
      }





    });
  </script>
  