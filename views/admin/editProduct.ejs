<%- include('adminHeader') %>

<div style="display: flex; background-color: #000000">
  <%- include('sidebar') %>

  <div class="w-full h-full p-8">
    <h4 class="font-bold text-white text-2xl mb-8">Add Product Details</h4>

    <form
      id="productForm"
      enctype="multipart/form-data"
      class="bg-[#1f1f1f] p-10 rounded-lg shadow-md max-w-4xl mx-auto font-[sans-serif]"
    >
      <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Product Name</label
          >
          <input
            required
            id="product_name"
            value="<%= product.product_name %>"
            type="text"
            name="product_name"
            placeholder="Enter Product Name"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Release Date</label
          >
          <input type="hidden" id="selectedCategoryId" name="categoryId" value="<%= cat._id %>">

          <input
            required
            id="release_date"
            value="<%= product.release_date ? new Date(product.release_date).toISOString().split('T')[0] : '' %>"
            
            type="date"
            name="release_date"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Genre</label
          >
          <input
            id="genre"
            type="text"
            name="genre"
            value="<%=product.genre%>"
            placeholder="Enter Genre"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
            required
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Developer Name</label
          >
          <input
            required
            id="developer"
            value="<%=product.developer%>"
            type="text"
            name="developer"
            placeholder="Enter Developer Name"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>



       







        <!-- <p><%= cat._id %></p> -->
        <div class="relative">
          <label class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white">
            Category
          </label>

          <select
          id="categorySelect"
          name="category"
          class="border border-gray-700 bg-black text-white px-5 py-2 w-full">
         
      
          <!-- Loop through the categories and create an option for each -->
          <% categories.forEach((category) => { %>
            <option value="<%= category._id %>" <% if (cat._id && category._id.equals(cat._id)) { %> selected <% } %>>
              <%= category.collectionName %>
            </option>
          <% }) %>
        </select>
  
  
        
         
        
          <!-- Hidden input to store the selected category ID -->
          
        </div>
        

        <!-- Other form fields (same structure as above) -->

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >PEGI Rating</label
          >
          
          <input
            required
            min="0"
            id="PEGI"
            value="<%=product.PEGI_rating%>"
            name="PEGI_rating"
            type="number"
            placeholder="Enter age limit"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
            
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Quantity</label
          >
          <input
            required
            min="0"
            value="<%=product.stock%>"
            id="stock"
            type="number"
            name="stock"
            placeholder="Enter the stock"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Price</label
          >
          <input
            required
            min="100"
            value="<%=product.price%>"
            id="price"
            type="number"
            name="price"
            placeholder="Enter price"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Discount</label
          >
          <input
            required
            min="0"
            value="<%=product.discount%>"
            max="100"
            id="discount"
            type="number"
            name="discount"
            placeholder="Enter discount percentage"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Gameplay Hour</label
          >
          <input
            required
            value="<%=product.game_Play_hour%>"
            min="1"
            id="game_Play_hour"
            type="number"
            name="game_Play_hour"
            placeholder="Enter hour"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>
        
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Country of orgin</label
          >
          <input
            required
            value="<%=product.country_of_orgin%>"
            id="country_of_orgin"
            type="text"
            name="country_of_orgin"
            placeholder="Enter country name"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Publisher</label
          >
          <input
            required
            id="publisher"
            value="<%=product.publisher%>"
            name="publisher"
            type="text"
            placeholder="Enter Publisher name"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Playable on</label
          >
          <input
            required
            id="playable_on"
            value="<%=product.playable_on%>"
            type="text"
            name="playable_on"
            placeholder="Enter Playable devices"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>
        <div class="relative">
          <label
            class="absolute left-3 top-[-10px] bg-[#1f1f1f] px-2 text-sm text-white"
            >Trailer</label
          >
          <input
            required
            id="trailer_link"
            value="<%=product.trailer_link%>"
            type="text"
            name="trailer_link"
            placeholder="Enter Trailer link"
            class="w-full rounded border border-gray-700 bg-black text-white px-4 py-3 focus:outline-none focus:border-blue-500"
          />
        </div>

        <!-- Internet Requirement radio -->
        <div class="relative">
          <label class="block text-white text-sm">Internet Requirement</label>
          <div class="mt-2 flex items-center">
            <input
              required
              class="mr-2"
              type="radio"
              id="yes"
              value="true"
              name="internet_requirement"
              <% if (product.internet_requirement === true) { %> checked <% } %>
            />
            <label for="yes" class="text-white">Yes</label>

            <input
              required
              class="ml-6 mr-2"
              type="radio"
              value="false"
              id="no"
              name="internet_requirement"
              <% if (product.internet_requirement === false) { %> checked <% } %>
            />
            <label for="no" class="text-white">No</label>
          </div>
        </div>

        <div class="relative flex items-center">
          <label
            class="absolute left-[18px] top-[-10px] bg-black px-2 text-[13px] text-white"
            >Description</label
          >
          <textarea
            required
            id="product_description"
            name="discription"
            
            placeholder="Type Description"
            class="mx-auto block w-full max-w-md rounded border border-gray-300 text-white bg-black p-4 text-sm outline-[#007bff]"
            rows="4"
          ><%= product.discription %></textarea>
        </div>

        <!-- Spinner -->
        <div
          id="spinner"
          class="hidden fixed inset-0 flex justify-center items-center z-[1000]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-10 animate-spin fill-blue-600 block mx-auto"
            viewBox="0 0 24 24"
          >
            <path
              d="M12 22c5.421 0 10-4.579 10-10h-2c0 4.337-3.663 8-8 8s-8-3.663-8-8c0-4.336 3.663-8 8-8V2C6.579 2 2 6.58 2 12c0 5.421 4.579 10 10 10z"
              data-original="#000000"
            />
          </svg>
        </div>

        <!-- Success Modal -->

        <div
          id="successModal"
          class="hidden fixed inset-0 flex justify-center items-center z-[1000]"
        >
          <!-- Modal Background Overlay -->
          <div class="absolute inset-0 bg-[rgba(0,0,0,0.5)]"></div>

          <!-- Modal Content -->
          <div
            class="relative w-full max-w-md bg-gray-800 shadow-lg rounded-lg p-6 text-center z-[1001]"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-20 h-20 fill-green-500 absolute left-1/2 top-0 -translate-x-1/2 -translate-y-1/2"
              viewBox="0 0 60 60"
            >
              <circle cx="30" cy="30" r="29" />
              <path
                fill="#fff"
                d="m
                24.262 42.07-6.8-6.642a1.534 1.534 0 0 1 0-2.2l2.255-2.2a1.621 1.621 0 0 1 2.256 0l4.048 3.957 11.353-17.26a1.617 1.617 0 0 1 2.2-.468l2.684 1.686a1.537 1.537 0 0 1 .479 2.154L29.294 41.541a3.3 3.3 0 0 1-5.032.529z"
              />
            </svg>

            <div class="mt-12">
              <h3 class="text-white text-2xl font-bold">Success</h3>
              <p class="text-sm text-white mt-3">Product updated successfully</p>
              <button
                id="successBtn"
                type="button"
                class="px-6 py-2.5 mt-8 w-full rounded-md text-white text-sm font-semibold bg-green-500 hover:bg-green-600"
              >
                OK
              </button>
            </div>
          </div>
        </div>


<p class="hidden" id="productId"><%= product._id %></p>



 <!------------------------------------------------------------------ File Upload with Preview & Crop ------------------------------------------------------>

        <div class="col-span-2">
          <label class="block text-sm text-white mb-2">Upload Files</label>
          <input
            id="fileInput"
            type="file"
            name="image"
            accept="image/*"
            multiple
            class="block w-full text-sm text-gray-400 file:bg-gray-700 file:border-none file:rounded file:text-white file:cursor-pointer file:px-4 file:py-2 hover:file:bg-gray-600"
          />
          <p class="mt-2 text-xs text-gray-400">Allowed formats: PNG, JPG, SVG, WEBP, GIF (Max: 3 files).</p>
        

          <!--------------------- Preview section ------------------------>

          <div id="previewContainer" class="grid grid-cols-3 gap-4 mt-4">
            <% product.image.forEach((img, index) => { %>
              <div class="relative">
                <img src="<%= img %>" class="w-full rounded border border-gray-700 p-2" alt="Product Image">
                <button 
                  type="button" 
                  class="absolute top-0 right-0 bg-red-500 text-white p-1 rounded-full" 
                  onclick="removeOldImage('<%= img %>')">
                  &times;
                </button>
              </div>
            <% }) %>
          </div>

           <!--------------------------------- Preview section -------------------------->


            <!-------------------- Crop Modal -------------------------------->
          <div
          id="cropModal"
          class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75"
        >
          <div class="bg-[#1f1f1f] p-8 rounded-lg">
            <div id="imagePreviewContainer" class="max-w-md">
              <img id="imageToCrop" class="w-full" src="" alt="To Crop" />
            </div>
            <div class="flex justify-between mt-4">
              <button
                type="button"
                id="cropButton"
                class="bg-blue-500 px-4 py-2 text-white rounded hover:bg-blue-600 transition"
              >
                Crop
              </button>
              <button
                type="button"
                id="cancelCropButton"
                class="bg-red-500 px-4 py-2 text-white rounded hover:bg-red-600 transition"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>

         <!-- --------------------------Crop Modal ------------------------------------------->





        </div>




<!------------------------------------------------------------------ File Upload with Preview & Crop ------------------------------------------------------>




        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
        />
      </div>

      <p class="hidden" id="imageLink"><%=product.image[0]%>"</p>

      <button
        id="addProductBtn"
        type="submit"
        class="mt-8 w-full rounded bg-blue-500 px-6 py-3 text-sm text-white hover:bg-blue-600 transition"
      >
        update Product
      </button>
    </form>
  </div>
</div>




<script>
  window.onload = () => {
    console.log("Page loaded");
    imageAdder(); // Initialize existing images
  };

  //----------------------------------- Category DropDown -----------------------------------
  const dropdownMenu = document.getElementById('dropdownMenu');
  const selectedCategoryId = document.getElementById('selectedCategoryId');

  // Function to handle category selection
  function selectCategory(categoryName, categoryId) {
    dropdownToggle.innerHTML = categoryName + `
      <svg xmlns="http://www.w3.org/2000/svg" class="ml-2 inline w-3 fill-white" viewBox="0 0 24 24">
        <path fill-rule="evenodd"
          d="M11.99997 18.1669a2.38 2.38 0 0 1-1.68266-.69733l-9.52-9.52a2.38 2.38 0 1 1 3.36532-3.36532l7.83734 7.83734 7.83734-7.83734a2.38 2.38 0 1 1 3.36532 3.36532l-9.52 9.52a2.38 2.38 0 0 1-1.68266.69734z"
          clip-rule="evenodd" />
      </svg>`;
    selectedCategoryId.value = categoryId;
    dropdownMenu.classList.add('hidden'); // Hide the dropdown menu
  }
  //----------------------------------- Category DropDown End -----------------------------------

  //----------------------------------- Image Cropping and Adding -----------------------------------
  const fileInput = document.getElementById("fileInput");
  const previewContainer = document.getElementById("previewContainer");
  const cropModal = document.getElementById("cropModal");
  const imageToCrop = document.getElementById("imageToCrop");
  const productForm = document.getElementById("productForm");
  const spinner = document.getElementById("spinner");
  const successModal = document.getElementById("successModal");
  const successBtn = document.getElementById("successBtn");
  const productId = document.getElementById("productId").innerHTML;

  let cropper;
  let fileCount = 0;
  let croppedImages = []; // Store all cropped images
  let removedImages = []; // Array to store removed images

  // Handle file input for cropping
  fileInput.addEventListener("change", handleFiles);

  function handleFiles(event) {
    const files = event.target.files;
    const maxFiles = 3;

    if (files.length + fileCount > maxFiles) {

      Swal.fire({
        icon:'warning',
        title:'warning',
        text: "You can upload a maximum of 3 files.",
        confirmButtonText: 'OK'
      })
      
      return;
    }

    Array.from(files).forEach((file) => {
      const reader = new FileReader();
      reader.onload = function (e) {
        imageToCrop.src = e.target.result;
        cropModal.classList.remove("hidden");

        if (cropper) {
          cropper.destroy(); // Make sure to destroy the previous cropper instance
        }

        cropper = new Cropper(imageToCrop, {
          aspectRatio: 1,
          viewMode: 1,
          background: false,
        });
      };
      reader.readAsDataURL(file);
    });
  }

  // Handle the crop button click
  document.getElementById("cropButton").addEventListener("click", function () {
    const croppedCanvas = cropper.getCroppedCanvas();
    const croppedImageURL = croppedCanvas.toDataURL();

    addImageToPreview(croppedImageURL, true);
    croppedImages.push(croppedImageURL); // Add to croppedImages array

    cropper.destroy();
    cropModal.classList.add("hidden");
    fileCount += 1;

    if (fileCount === 3) {
      Swal.fire({
        icon:'succes',
        title:'Uploaded',
        text:'Maximum number of images cropped.',
        timer:1000
      })
     
    }
  });

  // Function to add images to preview
  function addImageToPreview(imageSrc, isCropped = true) {
    const imgElement = document.createElement("img");
    imgElement.src = imageSrc;
    imgElement.classList.add("rounded", "border", "border-gray-700", "p-2");

    const imgContainer = document.createElement("div");
    imgContainer.classList.add("relative");

    // Add the image to the container
    imgContainer.appendChild(imgElement);

    // Add a delete button to remove the image
    const removeButton = document.createElement("button");
    removeButton.type = "button";
    removeButton.classList.add(
      "absolute", "top-0", "right-0", "bg-red-500", "text-white", "p-1", "rounded-full"
    );
    removeButton.innerHTML = "&times;";
    removeButton.addEventListener("click", function () {
      imgContainer.remove(); // Remove the image container
      fileCount -= 1;
      if (!isCropped) {
        removedImages.push(imageSrc); // Add to removedImages array if it is an existing image
      } else {
        croppedImages = croppedImages.filter(img => img !== imageSrc); // Remove from croppedImages
      }
    });

    imgContainer.appendChild(removeButton);
    //previewContainer.appendChild(imgContainer);
  }

  // Function to remove old images from the preview
  function removeOldImage(imageSrc) {
    removedImages.push(imageSrc); // Add image to removedImages array
    const imgElement = document.querySelector(`img[src='${imageSrc}']`);
    if (imgElement) {
      imgElement.parentElement.remove(); // Remove image container
    }

    let imgIndex = croppedImages.indexOf(imageSrc)

    if(imgIndex != -1){
      croppedImages.splice(imgIndex,1)
    }else{
      console.log("Element not found");
      
    }
  }

  // Form submission logic
  productForm.addEventListener("submit", function (e) {
    e.preventDefault(); // Prevent default form submission

    const formData = new FormData(productForm);

    // Append cropped images as Base64 strings
    croppedImages.forEach((img, index) => {
      formData.append(`croppedImage${index + 1}`, img);
    });

    // Append removed images
    removedImages.forEach((img, index) => {
      formData.append(`removedImage${index}`, img);
    });

    spinner.classList.remove("hidden");

    // Submit form data via fetch
    fetch(`/admin/editProduct/${productId}`, {
      method: "POST",
      body: formData,
    })
      .then((response) => response.json())
      .then((data) => {
        spinner.classList.add("hidden");
        if (data.message) {
          successModal.classList.remove("hidden");
          productForm.reset();
          previewContainer.innerHTML = ""; // Clear preview container
          croppedImages = []; // Reset cropped images array
          removedImages = []; // Reset removed images array
          fileCount = 0; // Reset file count
        }
      })
      .catch((error) => {
        console.error("Error editing product:", error);
        Swal.fire({
          icon:'error',
          title:'Edit error',
          text:error||'An error occurred while editing the product.'
        })
      });
  });

  // Success modal close handler
  successBtn.addEventListener("click", function () {
    successModal.classList.add("hidden");
  });

  // Image loader for existing images
  function imageAdder() {
    const existingImages =' <%= product.image %>'; // Server-side code to inject existing images
    const link = existingImages.split(",")
    console.log("--",typeof link);
    
    let images = []
    link.forEach((val)=>{
      images.push(val.replace(/\s+/g, ''))

    })
    
    console.log("------------",images);
    
    loadExistingImages(link);
  }

  // Function to load existing images into the preview and croppedImages array
  function loadExistingImages(images) {
    images.forEach((imageSrc) => {
      addImageToPreview(imageSrc, false); // Load into preview without cropping
      croppedImages.push(imageSrc); // Add to the croppedImages array
    });
  }
</script>
